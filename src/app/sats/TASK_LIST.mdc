---
description: 
globs: 
alwaysApply: false
---
# Sats Page Implementation

A Bitcoin Lightning-powered photography platform where users can support creators with micropayments. Every like sends sats directly to photographers.

## Completed Tasks

- [x] Set up basic page structure with Next.js 14
- [x] Create responsive hero section with Framer Motion animations
- [x] Implement features grid with card components
- [x] Build photo grid component with hover effects
- [x] Add Lightning Network integration service
- [x] Configure image optimization for Unsplash photos
- [x] Set up proper client/server component boundaries
- [x] Add loading states and skeleton UI
- [x] Implement error handling for Lightning payments
- [x] Configure proper Next.js image domains and patterns
- [x] Fix server component serialization issues
- [x] Optimize Framer Motion imports for better performance
- [x] Add rate limiting for Lightning payment attempts
- [x] Implement webhook handling for Lightning payment confirmations
- [x] Add proper error tracking service integration (e.g., Sentry)
- [x] Fix Prisma/Vercel deployment issues (singleton pattern, env setup)

## In Progress Tasks

- [ ] Implement analytics to track user interactions and payments

## ⚡️ Lightning Node Integration (Voltage/LND)

**Step-by-step instructions for integrating and testing with your running Voltage LND node:**

1. **Obtain Connection Details from Voltage Dashboard**
   - Go to your Voltage dashboard, select your running node, and click "Connect".
   - Download your admin macaroon and (if needed) TLS certificate.
   - Note your node's REST/gRPC endpoint (host, port). Voltage often uses browser-trusted TLS, so the cert may not be needed for REST.
   - Reference: [Voltage Connect to Your Node](mdc:https:/docs.voltage.cloud/connect-to-your-node)

2. **Set Up Environment Variables**
   - Add the following to your `.env.local` (values to be filled in):
     ```env
     LND_REST_ENDPOINT=https://<your-node-endpoint>:8080
     LND_MACAROON_HEX=<hex-encoded-admin-macaroon>
     LND_TLS_CERT_PATH=<path-to-tls.cert-if-needed>
     ```
   - You can convert the macaroon file to hex with:
     ```sh
     xxd -ps -u -c 1000 admin.macaroon
     ```
   - For local dev, you may want to add a script to load the macaroon from file and convert to hex.

3. **Implement Backend Utility for LND REST/gRPC Calls**
   - Use a library like `axios` for REST or `grpc` for gRPC.
   - For REST, include the macaroon in the `Grpc-Metadata-macaroon` header.
   - Example (Node.js, REST):
     ```js
     const axios = require('axios');
     const macaroon = process.env.LND_MACAROON_HEX;
     const url = process.env.LND_REST_ENDPOINT + '/v1/getinfo';
     axios.get(url, { headers: { 'Grpc-Metadata-macaroon': macaroon } })
       .then(res => console.log(res.data));
     ```
   - Reference: [LND API Reference](mdc:https:/lightning.engineering/api-docs/api/lnd/index.html)

4. **Create API Endpoints for Lightning Actions**
   - [ ] `/api/lightning/invoice` (POST): Create invoice
   - [ ] `/api/lightning/pay` (POST): Pay invoice
   - [ ] `/api/lightning/balance` (GET): Get wallet/node balance
   - Each endpoint should call the backend utility and handle errors gracefully.

5. **Integrate Lightning Actions into `/src/app/sats` UI**
   - Add UI for creating and paying invoices, and displaying balances.
   - Show loading and error states for all Lightning actions.

6. **Test with Real Voltage Node**
   - Use your running Voltage node to:
     - Create a test invoice and pay it (can use testnet if desired)
     - Check node and wallet balances
     - Confirm all API endpoints and UI flows work as expected
   - Troubleshoot any connection/authentication issues (check macaroon, endpoint, and TLS settings)

7. **Document Setup and Usage**
   - Add a section to your project README with setup steps for Voltage integration.
   - Include how to obtain credentials, set environment variables, and run tests.

**Practical Notes:**
- Macaroon authentication is required for all LND API calls.
- For REST, Voltage nodes often do not require a custom TLS cert (browser-trusted), but gRPC may need it.
- Always keep your admin macaroon secure—never commit it to version control.
- For more, see [Voltage Docs](mdc:https:/docs.voltage.cloud/connect-to-your-node) and [LND API Reference](mdc:https:/lightning.engineering/api-docs/api/lnd/index.html).

## Future Tasks

- [ ] Add user authentication system
- [ ] Implement photographer profiles and portfolios
- [ ] Create dashboard for photographers to track earnings
- [ ] Add image upload functionality for photographers
- [ ] Add automated testing suite
- [ ] Set up CI/CD pipeline
- [ ] Implement proper SEO optimization
- [ ] Add proper logging system
- [ ] Create backup and recovery procedures
- [ ] Implement content moderation system
- [ ] Add proper security headers
- [ ] Set up monitoring and alerting
- [ ] Create documentation for photographers and users

## Implementation Plan

### Architecture

- Next.js 14 with App Router for the frontend
- Lightning Network for payments
- Framer Motion for animations
- Shadcn UI + Tailwind for styling
- SWR for data fetching (to be implemented)
- Redis for rate limiting (implemented)
- Sentry for error tracking (implemented)
- Prisma singleton pattern for Vercel/Next.js compatibility (implemented)

### Data Flow

1. User views photo grid
2. On like/support:
   - Check Lightning wallet connection
   - Initiate payment
   - Show loading state
   - Handle success/failure
   - Update UI accordingly

### Technical Requirements for Production

1. Error Handling:
   - Implement proper error boundaries
   - Add error tracking service
   - Create user-friendly error messages

2. Performance:
   - Optimize image loading
   - Implement proper caching
   - Add performance monitoring

3. Security:
   - Add rate limiting
   - Implement proper CORS policies
   - Set up security headers
   - Add input validation

4. Monitoring:
   - Set up logging
   - Add performance metrics
   - Create alerting system

### Relevant Files

- `src/app/sats/page.tsx` - Main page component ✅
- `src/app/sats/components/PhotoGrid.tsx` - Photo grid with Lightning integration ✅
- `src/app/sats/components/HeroSection.tsx` - Animated hero section ✅
- `src/app/sats/components/FeatureCard.tsx` - Feature card component ✅
- `src/app/sats/components/PhotoGridSkeleton.tsx` - Loading skeleton component ✅
- `src/services/lightning/index.ts` - Lightning Network service ✅
- `next.config.js` - Next.js configuration ✅
- `src/lib/prisma.ts` - Prisma singleton utility ✅

### Environment Variables Needed

```env
NEXT_PUBLIC_LIGHTNING_NETWORK_URL=
LND_REST_ENDPOINT=
LND_MACAROON_HEX=
LND_TLS_CERT_PATH=
NEXT_PUBLIC_UNSPLASH_ACCESS_KEY=
SENTRY_DSN=
REDIS_URL=
DATABASE_URL=
```

### Production Checklist

Before deploying to production:

1. Security:
   - [ ] Implement rate limiting
   - [ ] Add security headers
   - [ ] Set up CORS policies
   - [ ] Add input validation
   - [ ] Configure proper CSP

2. Performance:
   - [ ] Run Lighthouse audits
   - [ ] Optimize bundle size
   - [ ] Configure caching
   - [ ] Set up CDN

3. Monitoring:
   - [ ] Set up error tracking
   - [ ] Configure logging
   - [ ] Add performance monitoring
   - [ ] Set up alerts

4. Testing:
   - [ ] Add unit tests
   - [ ] Add integration tests
   - [ ] Add E2E tests
   - [ ] Test error scenarios

5. Documentation:
   - [ ] Add API documentation
   - [ ] Create user guide
   - [ ] Write deployment guide
   - [ ] Document error codes
